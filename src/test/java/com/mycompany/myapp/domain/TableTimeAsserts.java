package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TableTimeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTableTimeAllPropertiesEquals(TableTime expected, TableTime actual) {
        assertTableTimeAutoGeneratedPropertiesEquals(expected, actual);
        assertTableTimeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTableTimeAllUpdatablePropertiesEquals(TableTime expected, TableTime actual) {
        assertTableTimeUpdatableFieldsEquals(expected, actual);
        assertTableTimeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTableTimeAutoGeneratedPropertiesEquals(TableTime expected, TableTime actual) {
        assertThat(expected)
            .as("Verify TableTime auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTableTimeUpdatableFieldsEquals(TableTime expected, TableTime actual) {}

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTableTimeUpdatableRelationshipsEquals(TableTime expected, TableTime actual) {
        assertThat(expected)
            .as("Verify TableTime relationships")
            .satisfies(e -> assertThat(e.getClasses()).as("check classes").isEqualTo(actual.getClasses()))
            .satisfies(e -> assertThat(e.getStudent()).as("check student").isEqualTo(actual.getStudent()))
            .satisfies(e -> assertThat(e.getCourse()).as("check course").isEqualTo(actual.getCourse()));
    }
}
